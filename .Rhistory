#onRoadPath1 = subset(bikePath, PathType == 1)
plot(onRoadPath)
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
source('BLTS_functions.R')
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
?subset
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, PathType, onRoadPath_list)
onRoadPath = Subsetting_featureClass(bikePath, onRoadPath_list)
plot(onRoadPath)
plot(onRoadPath)
plot(streetCL)
plot(onRoadPath, col="Red", add=TRUE)
plot(bikePath, col="Blue", add=TRUE)
plot(onRoadPath, col="Red", add=TRUE)
plot(bikePath, col="Blue", add=TRUE)
plot(onRoadPath, col="Red", add=TRUE)
source('BLTS_param.R')
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
plot(offRoadPath, col="Red", add=TRUE)
plot(bikePath, col="Blue", add=TRUE)
plot(streetCL)
plot(offRoadPath, col="Red", add=TRUE)
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
plot(streetCL)
plot(offRoadPath, col="Red", add=TRUE)
plot(bikePath, col="Blue", add=TRUE)
plot(offRoadPath, col="Red", add=TRUE)
plot(streetCL)
plot(bikePath, col="Blue", add=TRUE)
plot(offRoadPath, col="Red", add=TRUE)
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
plot(streetCL)
plot(bikePath, col="Blue", add=TRUE)
plot(offRoadPath, col="Red", add=TRUE)
plot(bikePath, col="Blue", add=TRUE)
plot(offRoadPath, col="Red", add=TRUE)
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
plot(streetCL)
plot(bikePath, col="Blue", add=TRUE)
plot(offRoadPath, col="Red", add=TRUE)
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
plot(streetCL)
plot(bikePath, col="Blue", add=TRUE)
plot(offRoadPath, col="Red", add=TRUE)
source('BLTS_functions.R')
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
plot(streetCL)
plot(bikePath, col="Blue", add=TRUE)
plot(offRoadPath, col="Red", add=TRUE)
streetCL.raster = R_rasterizeFunction(streetCL, crs, ext, res, "SPEED")
streetCL.raster = R_rasterizeFunction(streetCL, crs, studyExtent, res, "SPEED")
plot(streetCL.raster)
source('BLTS_functions.R')
streetCL.raster = R_rasterizeFunction(streetCL, crs, studyExtent, res, "SPEED")
plot(streetCL.raster)
streetCL.raster = R_rasterizeFunction(streetCL, crs, studyExtent, res, "SPEED")
source('BLTS_functions.R')
streetCL.raster = R_rasterizeFunction(streetCL, crs, studyExtent, res, "SPEED")
plot(streetCL.raster)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
print(dimensions)
print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
source('BLTS_param.R')
source('BLTS_functions.R')
onRoadPath = Subsetting_featureClass(bikePath, onRoadPath_list)
source('BLTS_param.R')
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
bikeLaneWAdjPL_stk = bl_adj_pk_function(streetCL, onRoadPath)
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
lpd = "lpd"
speed = "SPEED"
street_list = ls(lpd, speed)
print(street_list)
lpd = "lpd"
speed = "SPEED"
street_list = ls(lpd, speed)
?ls
street_list = c(lpd, speed)
print(street_list)
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
street_list = c(lpd, speed)
print(street_list)
for (attr in streetCL) {
plot(R_rasterizeFunction(streetCL, crs, studyExtent, res, attr))
}
for (attr in street_list) {
plot(R_rasterizeFunction(streetCL, crs, studyExtent, res, attr))
}
rasterStack = ()
rasterStack = stack()
?addLayer
for (attr in street_list) {
rasterStack = stack()
rasterStack = addLayer(R_rasterizeFunction(streetCL, crs, studyExtent, res, attr))
}
?addLayer
for (attr in street_list) {
rasterStack = stack()
rasterStack = stack(R_rasterizeFunction(streetCL, crs, studyExtent, res, attr))
}
rasterStack
rasterStack[1]
rasterStack[0]
rasterStack[2]
plot(rasterStack)
street_list = c(lpd, speed)
rasterStack = stack()
for (attr in street_list) {
rasterStack = stack(R_rasterizeFunction(streetCL, crs, studyExtent, res, attr))
}
rasterStack
rasterStack[1]
rasterStack[0]
plot(rasterStack)
plot(rasterStack)
street_list = c(lpd, speed)
rasterStack = stack()
for (attr in street_list) {
rasterStack = stack(rasterStack, R_rasterizeFunction(streetCL, crs, studyExtent, res, attr))
}
rasterStack
street_list = c(lpd, speed, markedCL)
rasterStack = stack()
for (attr in street_list) {
rasterStack = stack(rasterStack, R_rasterizeFunction(streetCL, crs, studyExtent, res, attr))
}
source('BLTS_param.R')
source('BLTS_functions.R')
street_list = c(lpd, speed, markedCL)
rasterStack = stack()
for (attr in street_list) {
rasterStack = stack(rasterStack, R_rasterizeFunction(streetCL, crs, studyExtent, res, attr))
}
rasterStack
rasterStack[0]
rasterStack[[0]]
rasterStack[1]
plot(rasterStack)
# Test Script on functions
library(raster)
library(rgdal)
library(gdalUtils)
library(gdistance)
library(gdata)
library(rgeos)
workDir = "G:/CUUATS/Sustainable Neighborhoods Toolkit/Scripts"
setwd(workDir)
source('BLTS_param.R')
source('BLTS_functions.R')
# Setting up boundary
boundary = Read_featureClass(boundary.fgdb, boundary.name, crs)
streetCL = Read_featureClass(path.fgdb, streetCL.name, crs)
bikePath = Read_featureClass(path.fgdb, bikePath.name, crs)
studyExtent = Set_studyExtent(boundary)
# Cropping feature to the boundary
streetCL = Crop_featureClass(boundary, streetCL)
bikePath = Crop_featureClass(boundary, bikePath)
# Subsetting bike path to on road bike path
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
onRoadPath = Subsetting_featureClass(bikePath, onRoadPath_list)
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
plot(bikeLaneWAdjPL.stk)
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath)
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath,lpd, speed, hasParking, combPkWidth)
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath,lpd, speed, hasParking, combPkWidth)
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath,lpd, speed, hasParking, combPkWidth)
source('BLTS_functions.R')
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath,lpd, speed, hasParking, combPkWidth)
# Test Script on functions
library(raster)
library(rgdal)
library(gdalUtils)
library(gdistance)
library(gdata)
library(rgeos)
workDir = "G:/CUUATS/Sustainable Neighborhoods Toolkit/Scripts"
setwd(workDir)
source('BLTS_param.R')
source('BLTS_functions.R')
# Setting up boundary
boundary = Read_featureClass(boundary.fgdb, boundary.name, crs)
streetCL = Read_featureClass(path.fgdb, streetCL.name, crs)
bikePath = Read_featureClass(path.fgdb, bikePath.name, crs)
studyExtent = Set_studyExtent(boundary)
# Cropping feature to the boundary
streetCL = Crop_featureClass(boundary, streetCL)
bikePath = Crop_featureClass(boundary, bikePath)
# Subsetting bike path to on road bike path
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
onRoadPath = Subsetting_featureClass(bikePath, onRoadPath_list)
# Rasterizing feature class
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath,lpd, speed, hasParking, combPkWidth)
# Test Script on functions
library(raster)
library(rgdal)
library(gdalUtils)
library(gdistance)
library(gdata)
library(rgeos)
workDir = "G:/CUUATS/Sustainable Neighborhoods Toolkit/Scripts"
setwd(workDir)
source('BLTS_param.R')
source('BLTS_functions.R')
# Setting up boundary
boundary = Read_featureClass(boundary.fgdb, boundary.name, crs)
streetCL = Read_featureClass(path.fgdb, streetCL.name, crs)
bikePath = Read_featureClass(path.fgdb, bikePath.name, crs)
studyExtent = Set_studyExtent(boundary)
# Cropping feature to the boundary
streetCL = Crop_featureClass(boundary, streetCL)
bikePath = Crop_featureClass(boundary, bikePath)
# Subsetting bike path to on road bike path
offRoadPath = Subsetting_featureClass(bikePath, offRoadPath_list)
onRoadPath = Subsetting_featureClass(bikePath, onRoadPath_list)
# Rasterizing feature class
bikeLaneWAdjPL.stk = bl_adj_pk_function(streetCL, onRoadPath,lpd, speed, hasParking, combPkWidth)
plot(bikeLaneWAdjPL.stk)
bikeLaneWAdjPL.stk
bikeLaneWAdjPL.stk[1]
bikeLaneWAdjPL.stk[1.1]
bikeLaneWAdjPL.stk[[1]]
bikeLaneWAdjPL.stk[[2]]
bikeLaneWAdjPL.stk[[3]]
comb_list = c(street_list, bikePath_list)
street_list = c(lpd, speed)
bikePath_list = c(hasParking, combPkWidth)
comb_list = c(street_list, bikePath_list)
names(bl_adj_pk.stk) = comb_list
names(bikeLaneWAdjPL.stk) = comb_list
bikeLaneWAdjPL.stk[[1]]
bikeLaneWAdjPL.stk[[lpd]]
name(bikeLaneWAdjPL.stk[[1]])
names(bikeLaneWAdjPL.stk[[1]])
names(bikeLaneWAdjPL.stk[[0]])
names(bikeLaneWAdjPL.stk[[2]])
names(bikeLaneWAdjPL.stk[[3]])
names(bikeLaneWAdjPL.stk[[4\]])
names(bikeLaneWAdjPL.stk[[4]])
plot(bikeLaneWAdjPL.stk[[lpd]] == 2)
plot(bikeLaneWAdjPL.stk[[lpd]] == 1)
plot(bikeLaneWAdjPL.stk[[hasParking]] == 1 &
bikeLaneWAdjPL.stk[[lpd]] == 1)
plot(bikeLaneWAdjPL.stk[[hasParking]] == 1 &
bikeLaneWAdjPL.stk[[lpd]] == 1 &
bikeLaneWAdjPL.stk[[speed]] <= 25)
plot(bikeLaneWAdjPL.stk[[hasParking]] == 1 &
bikeLaneWAdjPL.stk[[lpd]] == 1 &
bikeLaneWAdjPL.stk[[speed]] <= 25 &
bikeLaneWAdjPL.stk[[combPkWidth >= 15]])
bikeLaneWAdjPL.score = raster()
bikeLaneWAdjPl.score[bikeLaneWAdjPL.stk[[hasParking]] == 1 &
bikeLaneWAdjPL.stk[[lpd]] == 1 &
bikeLaneWAdjPL.stk[[speed]] <= 25 &
bikeLaneWAdjPL.stk[[combPkWidth >= 15]]] <- 1
bikeLaneWAdjPL.score[bikeLaneWAdjPL.stk[[hasParking]] == 1 &
bikeLaneWAdjPL.stk[[lpd]] == 1 &
bikeLaneWAdjPL.stk[[speed]] <= 25 &
bikeLaneWAdjPL.stk[[combPkWidth >= 15]]] <- 1
bikeLaneWAdjPL.score = raster(ext = studyExtent, crs = crs, res = res)
bikeLaneWAdjPL.score[bikeLaneWAdjPL.stk[[hasParking]] == 1 &
bikeLaneWAdjPL.stk[[lpd]] == 1 &
bikeLaneWAdjPL.stk[[speed]] <= 25 &
bikeLaneWAdjPL.stk[[combPkWidth >= 15]]] <- 1
plot(bikeLaneWAdjPL.score)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
print(dimensions)
print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
print(dimensions)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
print(dimensions)
print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
plot(scores)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
plot(scores)
#print(dimensions)
#print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
plot(scores)
#print(dimensions)
print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
plot(scores)
print(dimensions)
#print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
plot(scores)
print(dimensions)
dimensions
#print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
plot(scores)
print(dimensions[[1]])
#print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
plot(scores)
print(dimensions[[1,2]])
#print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
require(raster)
# Scoring function
scoreRaster <- function(x, ...) {
dimensions <- list(...)
if (length(x) != prod(lengths(dimensions))) stop('Length of x must match product of dimension lengths')
scores <- array(x, lengths(dimensions))
plot(scores)
plot(dimensions[[1]])
#print(scores)
}
# Input rasters
lanes <- raster(nrow=2, ncol=2, vals=c(2, 2, 3, 4))
speed <- raster(nrow=2, ncol=2, vals=c(25, 45, 50, 35))
aadt <- raster(nrow=2, ncol=2, vals=c(100, 400, 250, 450))
# Test scoring function
scoreRaster(
c(1, 2, 3, 2, 2, 3, 1, 3, 4, 2, 6, 4),
c(lanes <= 2, lanes > 2),
c(speed <= 25, speed > 25 & speed <= 40, speed > 40),
c(aadt <= 200, aadt > 200)
)
